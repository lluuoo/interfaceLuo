package com.jite.hibgen.dao;

import com.jite.hibgen.model.*;

import java.util.List;

import javax.naming.InitialContext;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Criteria;
import org.hibernate.LockMode;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;

import static org.hibernate.criterion.Example.create;

/**
 * Home object for domain model class TApproveLogs.
 * @see com.jite.hibgen.dao.TApproveLogs
 * @author Hibernate Tools
 */
public class TApproveLogsDao extends BaseDao<TApproveLogs>{

	private static final Log log = LogFactory.getLog(TApproveLogsDao.class);

	public void persist(TApproveLogs transientInstance) {
		log.debug("persisting TApproveLogs instance");
		try {
			getHibernateTemplate().persist(transientInstance);
			log.debug("persist successful");
		} catch (RuntimeException re) {
			log.error("persist failed", re);
			throw re;
		}
	}

	public void attachDirty(TApproveLogs instance) {
		log.debug("attaching dirty TApproveLogs instance");
		try {
			getHibernateTemplate().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void attachClean(TApproveLogs instance) {
		log.debug("attaching clean TApproveLogs instance");
		try {
			getHibernateTemplate().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void delete(TApproveLogs persistentInstance) {
		log.debug("deleting TApproveLogs instance");
		try {
			getHibernateTemplate().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	public TApproveLogs merge(TApproveLogs detachedInstance) {
		log.debug("merging TApproveLogs instance");
		try {
			TApproveLogs result = (TApproveLogs) getHibernateTemplate()
					.merge(detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	public TApproveLogs findById(java.lang.Long id) {
		log.debug("getting TApproveLogs instance with id: " + id);
		try {
			TApproveLogs instance = (TApproveLogs) getHibernateTemplate()
					.get("com.jite.hibgen.model.TApproveLogs",
							id);
			if (instance == null) {
				log.debug("get successful, no instance found");
			} else {
				log.debug("get successful, instance found");
			}
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	public List<TApproveLogs> findByExample(TApproveLogs instance) {
		log.debug("finding TApproveLogs instance by example");
		try {
			List<TApproveLogs> results = (List<TApproveLogs>) getHibernateTemplate().getSessionFactory()
					.getCurrentSession()
					.createCriteria("com.jite.hibgen.model.TApproveLogs")
					.add(create(instance)).list();
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}
	
	@SuppressWarnings("unchecked")
	public List<TApproveLogs> searchByCriteria(int pageNo, int pageSize,TApproveLogs search){
		try {
			Criteria criteria=getHibernateTemplate()
					.getSessionFactory().getCurrentSession()
					.createCriteria(TApproveLogs.class);
			
			setCritieaByAdvanceSearch(criteria,search);
			
			criteria.setProjection(null);
			criteria.addOrder(Order.desc("updateDate"));
			criteria.addOrder(Order.desc("createDate"));
			criteria.setFirstResult((pageNo - 1) * pageSize);  
	        criteria.setMaxResults(pageSize);  
	        
			return (List<TApproveLogs>)criteria.list();
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}		
	}
	private void setCritieaByAdvanceSearch(Criteria criteria,
			TApproveLogs search) {
		if(search.getCompanyId()!=null){
			criteria.add(Restrictions.eq("companyId", search.getCompanyId()));
		}
		if(search.getType()!=null){
			criteria.add(Restrictions.eq("type", search.getType()));
		}
	}

	public int searchByCriteriaTotal(TApproveLogs search){
		Criteria criteria=getHibernateTemplate()
				.getSessionFactory().getCurrentSession()
				.createCriteria(TApproveLogs.class);
		
		setCritieaByAdvanceSearch(criteria,search);
		
		return  Integer.valueOf(criteria.setProjection(Projections.rowCount()).uniqueResult().toString());		
	}
}
