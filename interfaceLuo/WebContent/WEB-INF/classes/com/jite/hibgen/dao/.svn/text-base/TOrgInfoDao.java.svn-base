package com.jite.hibgen.dao;

import com.jite.hibgen.model.*;

import java.util.List;

import javax.naming.InitialContext;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Criteria;
import org.hibernate.LockMode;
import org.hibernate.criterion.Disjunction;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;

import static org.hibernate.criterion.Example.create;

/**
 * Home object for domain model class TOrgInfo.
 * @see com.jite.hibgen.dao.TOrgInfo
 * @author Hibernate Tools
 */
public class TOrgInfoDao extends BaseDao<TOrgInfo>{

	private static final Log log = LogFactory.getLog(TOrgInfoDao.class);

	public TOrgInfoDao(){
	    super(TOrgInfo.class);
	}
	public TOrgInfoDao(TOrgInfo poClass){
	    super(poClass.getClass());
	}

	public void persist(TOrgInfo transientInstance) {
		log.debug("persisting TOrgInfo instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().persist(transientInstance);
			log.debug("persist successful");
		} catch (RuntimeException re) {
			log.error("persist failed", re);
			throw re;
		}
	}

	public void attachDirty(TOrgInfo instance) {
		log.debug("attaching dirty TOrgInfo instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void attachClean(TOrgInfo instance) {
		log.debug("attaching clean TOrgInfo instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void delete(TOrgInfo persistentInstance) {
		log.debug("deleting TOrgInfo instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	public TOrgInfo merge(TOrgInfo detachedInstance) {
		log.debug("merging TOrgInfo instance");
		try {
			TOrgInfo result = (TOrgInfo) getHibernateTemplate().getSessionFactory()
					.getCurrentSession().merge(detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	public TOrgInfo findById(java.lang.Long id) {
		log.debug("getting TOrgInfo instance with id: " + id);
		try {
			TOrgInfo instance = (TOrgInfo) getHibernateTemplate().getSessionFactory()
					.getCurrentSession().get(
							"com.jite.hibgen.model.TOrgInfo", id);
			if (instance == null) {
				log.debug("get successful, no instance found");
			} else {
				log.debug("get successful, instance found");
			}
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	public List<TOrgInfo> findByExample(TOrgInfo instance) {
		log.debug("finding TOrgInfo instance by example");
		try {
			List<TOrgInfo> results = (List<TOrgInfo>) getHibernateTemplate().getSessionFactory()
					.getCurrentSession()
					.createCriteria("com.jite.hibgen.model.TOrgInfo")
					.add(create(instance)).list();
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}
	
	public List<TOrgInfo> searchByCriteria(int pageNo, int pageSize,TOrgInfo search){
		log.debug("search THrJobBase instance by criteria");
		try {
			Criteria criteria=getHibernateTemplate()
					.getSessionFactory().getCurrentSession()
					.createCriteria(TOrgInfo.class);
			
			setCritieaByAdvanceSearch(criteria,search);
			
			criteria.setProjection(null);
			criteria.addOrder(Order.desc("updateDate"));
			criteria.addOrder(Order.desc("createDate"));
			criteria.setFirstResult((pageNo - 1) * pageSize);  
	        criteria.setMaxResults(pageSize);  
	        
			return (List<TOrgInfo>)criteria.list();
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}		
	}
	
	public int searchByCriteriaTotal(TOrgInfo search){
		Criteria criteria=getHibernateTemplate()
				.getSessionFactory().getCurrentSession()
				.createCriteria(TOrgInfo.class);
		
		setCritieaByAdvanceSearch(criteria,search);
		
		return  Integer.valueOf(criteria.setProjection(Projections.rowCount()).uniqueResult().toString());		
	}
	
	private void setCritieaByAdvanceSearch(Criteria criteria, TOrgInfo search) {
		if(search.getType()!=null&&!"".equals(search.getType())){
			criteria.add(Restrictions.eq("type", search.getType()));		
		}
		if(search.getTitle()!=null&&!"".equals(search.getTitle())){
			Disjunction dis=Restrictions.disjunction();
			dis.add(Restrictions.like("fromSource", search.getTitle(),MatchMode.ANYWHERE));
			dis.add(Restrictions.like("title", search.getTitle(),MatchMode.ANYWHERE));
			dis.add(Restrictions.like("description", search.getTitle(),MatchMode.ANYWHERE));
			dis.add(Restrictions.like("areaTags", search.getTitle(),MatchMode.ANYWHERE));
			dis.add(Restrictions.like("workTags", search.getTitle(),MatchMode.ANYWHERE));
			criteria.add(dis);
		}
	}
	public List<TOrgInfo> searchRecommends(int pageNo, int pageSize, String[] areaTags, String[] workTypeTags) {
		log.debug("search THrJobBase instance by criteria");
		try {
			Criteria criteria=getHibernateTemplate()
					.getSessionFactory().getCurrentSession()
					.createCriteria(TOrgInfo.class);
			
			Disjunction dis=Restrictions.disjunction();
			if(areaTags!=null&&areaTags.length>0){
				for(String oneTag:areaTags){
					dis.add(Restrictions.like("areaTags", oneTag,MatchMode.ANYWHERE));
				}
			}
			if(workTypeTags!=null&&workTypeTags.length>0){
				for(String oneTag:workTypeTags){
					dis.add(Restrictions.like("workTags", oneTag,MatchMode.ANYWHERE));
				}
			}			
			criteria.add(dis);
			
			criteria.setProjection(null);
			criteria.addOrder(Order.desc("visitSum"));
			criteria.addOrder(Order.desc("updateDate"));
			criteria.addOrder(Order.desc("createDate"));
			criteria.setFirstResult((pageNo - 1) * pageSize);  
	        criteria.setMaxResults(pageSize);  
	        
			return (List<TOrgInfo>)criteria.list();
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}

}
