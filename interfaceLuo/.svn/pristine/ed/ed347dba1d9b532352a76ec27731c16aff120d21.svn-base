package com.jite.hibgen.dao;

import com.jite.hibgen.model.*;

import java.util.List;

import javax.naming.InitialContext;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Criteria;
import org.hibernate.LockMode;
import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;

import static org.hibernate.criterion.Example.create;

/**
 * Home object for domain model class THrViewuserlog.
 * @see com.jite.hibgen.dao.THrViewuserlog
 * @author Hibernate Tools
 */
public class THrViewuserlogDao extends BaseDao<THrViewuserlog>{

	private static final Log log = LogFactory.getLog(THrViewuserlogDao.class);

	private final SessionFactory sessionFactory = getSessionFactory();

	public THrViewuserlogDao(){
		super(THrViewuserlog.class);
	}
	public THrViewuserlogDao(THrViewuserlogDao po){
		super(po.getClass());
	}
	

	public void persist(THrViewuserlog transientInstance) {
		log.debug("persisting THrViewuserlog instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().persist(transientInstance);
			log.debug("persist successful");
		} catch (RuntimeException re) {
			log.error("persist failed", re);
			throw re;
		}
	}

	public void attachDirty(THrViewuserlog instance) {
		log.debug("attaching dirty THrViewuserlog instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void attachClean(THrViewuserlog instance) {
		log.debug("attaching clean THrViewuserlog instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void delete(THrViewuserlog persistentInstance) {
		log.debug("deleting THrViewuserlog instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	public THrViewuserlog merge(THrViewuserlog detachedInstance) {
		log.debug("merging THrViewuserlog instance");
		try {
			THrViewuserlog result = (THrViewuserlog) sessionFactory
					.getCurrentSession().merge(detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	public THrViewuserlog findById(java.lang.Long id) {
		log.debug("getting THrViewuserlog instance with id: " + id);
		try {
			THrViewuserlog instance = (THrViewuserlog) sessionFactory
					.getCurrentSession().get(
							"com.jite.hibgen.dao.THrViewuserlog", id);
			if (instance == null) {
				log.debug("get successful, no instance found");
			} else {
				log.debug("get successful, instance found");
			}
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	public List<THrViewuserlog> findByExample(THrViewuserlog instance) {
		log.debug("finding THrViewuserlog instance by example");
		try {
			List<THrViewuserlog> results = (List<THrViewuserlog>) sessionFactory
					.getCurrentSession()
					.createCriteria("com.jite.hibgen.dao.THrViewuserlog")
					.add(create(instance)).list();
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public List searchBeVisitUser(Long hrId) {
		final String hqlString="select distinct tus.userId from THrViewuserlog tus where hrId=:theHrId order by createDate ";
		
		Query query=getHibernateTemplate().getSessionFactory()
		.getCurrentSession().createQuery(hqlString);
		query.setLong("theHrId",hrId); 

		return  query.list();
	}

	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public List<Object> searchBeVisitCompany(Long userId,int pageNo,int pageSize) {
		final String hqlString="select distinct tus.companyId from THrViewuserlog tus where userId=:theUserId order by createDate ";
		
		Query query=getHibernateTemplate().getSessionFactory()
		.getCurrentSession().createQuery(hqlString);
		query.setLong("theUserId",userId); 

		return  query.setFirstResult((pageNo - 1) * pageSize).setMaxResults(pageSize).list();
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public List<Object> searchBeVisitCompanyTotalCount(Long userId) {
		final String hqlString="select distinct tus.companyId from THrViewuserlog tus where userId=:theUserId order by createDate ";
		
		Query query=getHibernateTemplate().getSessionFactory()
		.getCurrentSession().createQuery(hqlString);
		query.setLong("theUserId",userId); 

		return  query.list();
	}
	
	public List<THrViewuserlog> searchByCriteria(int pageNo, int pageSize,THrViewuserlog search){
		log.debug("search THrJobBase instance by criteria");
		try {
			Criteria criteria=getHibernateTemplate()
					.getSessionFactory().getCurrentSession()
					.createCriteria(THrViewuserlog.class);
			
			setCritieaByAdvanceSearch(criteria,search);
			
			criteria.setProjection(null);
			criteria.addOrder(Order.desc("updateDate"));
			criteria.addOrder(Order.desc("createDate"));
			criteria.setFirstResult((pageNo - 1) * pageSize);  
	        criteria.setMaxResults(pageSize);  
	        
			return (List<THrViewuserlog>)criteria.list();
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}		
	}
	
	public int searchByCriteriaTotal(THrViewuserlog search){
		Criteria criteria=getHibernateTemplate()
				.getSessionFactory().getCurrentSession()
				.createCriteria(THrViewuserlog.class);
		
		setCritieaByAdvanceSearch(criteria,search);
		
		return  Integer.valueOf(criteria.setProjection(Projections.rowCount()).uniqueResult().toString());		
	}
	
	private void setCritieaByAdvanceSearch(Criteria criteria, THrViewuserlog search) {
		criteria.add(Restrictions.eq("status", 0));//TODO,查询未删除的数据			
	}	
}
