package com.jite.hibgen.dao;

import com.jite.hibgen.model.*;

import java.util.List;

import javax.naming.InitialContext;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Criteria;
import org.hibernate.LockMode;
import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;

import static org.hibernate.criterion.Example.create;

/**
 * Home object for domain model class TUserViewlog.
 * @see com.jite.hibgen.model.TUserViewlog
 * @author Hibernate Tools
 */
public class TUserViewlogDao extends BaseDao<TUserViewlog>{

	private static final Log log = LogFactory.getLog(TUserViewlogDao.class);

	public TUserViewlogDao(){
		super(TUserViewlog.class);
	}
	public TUserViewlogDao(TUserViewlogDao po){
		super(po.getClass());
	}
	

	public void persist(TUserViewlog transientInstance) {
		log.debug("persisting TUserViewlog instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().persist(transientInstance);
			log.debug("persist successful");
		} catch (RuntimeException re) {
			log.error("persist failed", re);
			throw re;
		}
	}

	public void attachDirty(TUserViewlog instance) {
		log.debug("attaching dirty TUserViewlog instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void attachClean(TUserViewlog instance) {
		log.debug("attaching clean TUserViewlog instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void delete(TUserViewlog persistentInstance) {
		log.debug("deleting TUserViewlog instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	public TUserViewlog merge(TUserViewlog detachedInstance) {
		log.debug("merging TUserViewlog instance");
		try {
			TUserViewlog result = (TUserViewlog) getHibernateTemplate().getSessionFactory().getCurrentSession().merge(detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	public TUserViewlog findById(java.lang.Long id) {
		log.debug("getting TUserViewlog instance with id: " + id);
		try {
			TUserViewlog instance = (TUserViewlog) getHibernateTemplate().getSessionFactory().getCurrentSession().get("com.jite.hibgen.dao.TUserViewlog", id);
			if (instance == null) {
				log.debug("get successful, no instance found");
			} else {
				log.debug("get successful, instance found");
			}
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	public List<TUserViewlog> findByExample(TUserViewlog instance) {
		log.debug("finding TUserViewlog instance by example");
		try {
			List<TUserViewlog> results = (List<TUserViewlog>) getHibernateTemplate().getSessionFactory().getCurrentSession()
					.createCriteria("com.jite.hibgen.model.TUserViewlog")
					.add(create(instance)).list();
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public List<Object> searchBeVisitCompanyTotalCount(Long userId) {
		final String hqlString="select distinct tus.companyId from TUserViewlog tus order by createDate ";
		
		Query query=getHibernateTemplate().getSessionFactory()
		.getCurrentSession().createQuery(hqlString);
	
		return  query.list();
	}
	
	public List<TUserViewlog> searchByCriteria(int pageNo, int pageSize,TUserViewlog search){
		log.debug("search THrJobBase instance by criteria");
		try {
			Criteria criteria=getHibernateTemplate()
					.getSessionFactory().getCurrentSession()
					.createCriteria(TUserViewlog.class);
			
			setCritieaByAdvanceSearch(criteria,search);
			
			criteria.setProjection(null);
			criteria.addOrder(Order.desc("updateDate"));
			criteria.addOrder(Order.desc("createDate"));
			criteria.setFirstResult((pageNo - 1) * pageSize);  
	        criteria.setMaxResults(pageSize);  
	        
			return (List<TUserViewlog>)criteria.list();
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}		
	}
	
	public int searchByCriteriaTotal(TUserViewlog search){
		Criteria criteria=getHibernateTemplate()
				.getSessionFactory().getCurrentSession()
				.createCriteria(TUserViewlog.class);
		
		setCritieaByAdvanceSearch(criteria,search);
		
		return  Integer.valueOf(criteria.setProjection(Projections.rowCount()).uniqueResult().toString());		
	}
	
	private void setCritieaByAdvanceSearch(Criteria criteria, TUserViewlog search) {
		criteria.add(Restrictions.eq("status", 0));//TODO,查询未删除的数据			
	}
	
	@SuppressWarnings("unchecked")
	public List<Object> queryUserJobs(int pageNo,int pageSize,long userId,long id){
		final String hqlString="select distinct jobId from TUserViewlog where userId=:theUserId and jobId<>:theJobId order by updateDate desc";
		
		Query query=getHibernateTemplate().getSessionFactory().getCurrentSession().createQuery(hqlString);
		query.setLong("theUserId",userId); 
		query.setLong("theJobId",id); 
		query.setFirstResult((pageNo - 1) * pageSize);
        query.setMaxResults(pageSize);
        
		return  query.list();
	}	
	@SuppressWarnings("unchecked")
	public List<Object> queryUserJobsTotal(long userId,long id){
		final String hqlString="select distinct jobId from TUserViewlog where userId=:theUserId and jobId<>:theJobId order by updateDate desc";
		
		Query query=getHibernateTemplate().getSessionFactory()
		.getCurrentSession().createQuery(hqlString);
		query.setLong("theUserId",userId); 
		query.setLong("theJobId",id);

		return  query.list();
	}	
}
