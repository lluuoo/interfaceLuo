package com.jite.hibgen.dao;

import com.jite.hibgen.model.*;

import java.util.List;

import javax.naming.InitialContext;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;

import static org.hibernate.criterion.Example.create;

/**
 * Home object for domain model class TAgentAccountUser.
 * @see com.jite.hibgen.dao.TAgentAccountUserDao
 * @author Hibernate Tools
 */
public class TAgentAccountUserDao extends BaseDao<TAgentAccountUser>{

	private static final Log log = LogFactory.getLog(TAgentAccountUserDao.class);

	public TAgentAccountUserDao(){
	    super(TAgentAccountUser.class);
	}
	public TAgentAccountUserDao(TAgentAccountUser poClass){
	    super(poClass.getClass());
	}

	public void persist(TAgentAccountUser transientInstance) {
		log.debug("persisting TAgentAccountUser instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().persist(transientInstance);
			log.debug("persist successful");
		} catch (RuntimeException re) {
			log.error("persist failed", re);
			throw re;
		}
	}

	public void attachDirty(TAgentAccountUser instance) {
		log.debug("attaching dirty TAgentAccountUser instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void attachClean(TAgentAccountUser instance) {
		log.debug("attaching clean TAgentAccountUser instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void delete(TAgentAccountUser persistentInstance) {
		log.debug("deleting TAgentAccountUser instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	public TAgentAccountUser merge(TAgentAccountUser detachedInstance) {
		log.debug("merging TAgentAccountUser instance");
		try {
			TAgentAccountUser result = (TAgentAccountUser) getHibernateTemplate().getSessionFactory()
					.getCurrentSession().merge(detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	public TAgentAccountUser findById(java.lang.Long id) {
		log.debug("getting TAgentAccountUser instance with id: " + id);
		try {
			TAgentAccountUser instance = (TAgentAccountUser) getHibernateTemplate().getSessionFactory()
					.getCurrentSession().get(
							"com.jite.hibgen.model.TAgentAccountUser", id);
			if (instance == null) {
				log.debug("get successful, no instance found");
			} else {
				log.debug("get successful, instance found");
			}
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	public List<TAgentAccountUser> findByExample(TAgentAccountUser instance) {
		log.debug("finding TAgentAccountUser instance by example");
		try {
			List<TAgentAccountUser> results = (List<TAgentAccountUser>) getHibernateTemplate().getSessionFactory()
					.getCurrentSession()
					.createCriteria("com.jite.hibgen.model.TAgentAccountUser")
					.add(create(instance)).list();
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}
	public TAgentAccountUser saveOrUpdate(TAgentAccountUser taau) {
		persist(taau);
		return taau;
	}

}
