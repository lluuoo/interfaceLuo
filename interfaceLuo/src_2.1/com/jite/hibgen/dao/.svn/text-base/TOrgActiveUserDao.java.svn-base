package com.jite.hibgen.dao;

import com.jite.hibgen.model.*;

import java.util.List;

import javax.naming.InitialContext;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;

import static org.hibernate.criterion.Example.create;

/**
 * Home object for domain model class TOrgActiveUser.
 * @see com.jite.hibgen.dao.TOrgActiveUserDao
 * @author Hibernate Tools
 */
public class TOrgActiveUserDao extends BaseDao<TOrgActiveUser>{

	private static final Log log = LogFactory.getLog(TOrgActiveUserDao.class);

	public TOrgActiveUserDao(){
	    super(TOrgActiveUser.class);
	}
	public TOrgActiveUserDao(TOrgActiveUser poClass){
	    super(poClass.getClass());
	}

	public void persist(TOrgActiveUser transientInstance) {
		log.debug("persisting TOrgActiveUser instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().persist(transientInstance);
			log.debug("persist successful");
		} catch (RuntimeException re) {
			log.error("persist failed", re);
			throw re;
		}
	}

	public void attachDirty(TOrgActiveUser instance) {
		log.debug("attaching dirty TOrgActiveUser instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void attachClean(TOrgActiveUser instance) {
		log.debug("attaching clean TOrgActiveUser instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void delete(TOrgActiveUser persistentInstance) {
		log.debug("deleting TOrgActiveUser instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	public TOrgActiveUser merge(TOrgActiveUser detachedInstance) {
		log.debug("merging TOrgActiveUser instance");
		try {
			TOrgActiveUser result = (TOrgActiveUser) getHibernateTemplate().getSessionFactory()
					.getCurrentSession().merge(detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	public TOrgActiveUser findById(java.lang.Long id) {
		log.debug("getting TOrgActiveUser instance with id: " + id);
		try {
			TOrgActiveUser instance = (TOrgActiveUser) getHibernateTemplate().getSessionFactory()
					.getCurrentSession().get(
							"com.jite.hibgen.model.TOrgActiveUser", id);
			if (instance == null) {
				log.debug("get successful, no instance found");
			} else {
				log.debug("get successful, instance found");
			}
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	public List<TOrgActiveUser> findByExample(TOrgActiveUser instance) {
		log.debug("finding TOrgActiveUser instance by example");
		try {
			List<TOrgActiveUser> results = (List<TOrgActiveUser>) getHibernateTemplate().getSessionFactory()
					.getCurrentSession()
					.createCriteria("com.jite.hibgen.model.TOrgActiveUser")
					.add(create(instance)).list();
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}

}
