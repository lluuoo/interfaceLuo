package com.jite.hibgen.dao;

import com.jite.hibgen.model.*;

import java.util.List;

import javax.naming.InitialContext;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Criteria;
import org.hibernate.LockMode;
import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;

import static org.hibernate.criterion.Example.create;

/**
 * Home object for domain model class TSystemSmslog.
 * @see com.jite.hibgen.dao.TSystemSmslog
 * @author Hibernate Tools
 */
public class TSystemSmslogDao extends BaseDao<TSystemSmslog>{

	private static final Log log = LogFactory.getLog(TSystemSmslogDao.class);

	private final SessionFactory sessionFactory = getSessionFactory();

	public TSystemSmslogDao(){
		super(TSystemSmslog.class);
	}
	public TSystemSmslogDao(TSystemSmslogDao po){
		super(po.getClass());
	}
	

	public void persist(TSystemSmslog transientInstance) {
		log.debug("persisting TSystemSmslog instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().persist(transientInstance);
			log.debug("persist successful");
		} catch (RuntimeException re) {
			log.error("persist failed", re);
			throw re;
		}
	}

	public void attachDirty(TSystemSmslog instance) {
		log.debug("attaching dirty TSystemSmslog instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void attachClean(TSystemSmslog instance) {
		log.debug("attaching clean TSystemSmslog instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void delete(TSystemSmslog persistentInstance) {
		log.debug("deleting TSystemSmslog instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	public TSystemSmslog merge(TSystemSmslog detachedInstance) {
		log.debug("merging TSystemSmslog instance");
		try {
			TSystemSmslog result = (TSystemSmslog) sessionFactory
					.getCurrentSession().merge(detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	public TSystemSmslog findById(java.lang.Long id) {
		log.debug("getting TSystemSmslog instance with id: " + id);
		try {
			TSystemSmslog instance = (TSystemSmslog) sessionFactory
					.getCurrentSession().get(
							"com.jite.hibgen.model.TSystemSmslog", id);
			if (instance == null) {
				log.debug("get successful, no instance found");
			} else {
				log.debug("get successful, instance found");
			}
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	public List<TSystemSmslog> findByExample(TSystemSmslog instance) {
		log.debug("finding TSystemSmslog instance by example");
		try {
			List<TSystemSmslog> results = (List<TSystemSmslog>) sessionFactory
					.getCurrentSession()
					.createCriteria("com.jite.hibgen.model.TSystemSmslog")
					.add(create(instance)).list();
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}
	
	
	
	public int getMaxId(){
		Criteria criteria=getHibernateTemplate()
				.getSessionFactory().getCurrentSession()
				.createCriteria(TSystemSmslog.class);
		
		criteria.setProjection( Projections.projectionList().add(Projections.max("id")));
		
		Object result=criteria.uniqueResult();
		
		return  result==null?1:Integer.valueOf(result.toString());		
	}
	

}
