package com.jite.hibgen.dao;

import com.jite.hibgen.model.*;

import java.util.List;

import javax.naming.InitialContext;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Criteria;
import org.hibernate.LockMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;

import static org.hibernate.criterion.Example.create;

/**
 * Home object for domain model class TUserMessageTemplate.
 * @see com.jite.hibgen.dao.TUserMessageTemplate
 * @author Hibernate Tools
 */
public class TUserMessageTemplateDao extends BaseDao<TUserMessageTemplate>{

	private static final Log log = LogFactory.getLog(TUserMessageTemplateDao.class);



	public void persist(TUserMessageTemplate transientInstance) {
		log.debug("persisting TUserMessageTemplate instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().persist(transientInstance);
			log.debug("persist successful");
		} catch (RuntimeException re) {
			log.error("persist failed", re);
			throw re;
		}
	}

	public void attachDirty(TUserMessageTemplate instance) {
		log.debug("attaching dirty TUserMessageTemplate instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void attachClean(TUserMessageTemplate instance) {
		log.debug("attaching clean TUserMessageTemplate instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void delete(TUserMessageTemplate persistentInstance) {
		log.debug("deleting TUserMessageTemplate instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	public TUserMessageTemplate merge(TUserMessageTemplate detachedInstance) {
		log.debug("merging TUserMessageTemplate instance");
		try {
			TUserMessageTemplate result = (TUserMessageTemplate) getHibernateTemplate().getSessionFactory()
					.getCurrentSession().merge(detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	public TUserMessageTemplate findById(java.lang.Long id) {
		log.debug("getting TUserMessageTemplate instance with id: " + id);
		try {
			TUserMessageTemplate instance = (TUserMessageTemplate) getHibernateTemplate().getSessionFactory()
					.getCurrentSession().get(
							"com.jite.hibgen.model.TUserMessageTemplate", id);
			if (instance == null) {
				log.debug("get successful, no instance found");
			} else {
				log.debug("get successful, instance found");
			}
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	public List<TUserMessageTemplate> findByExample(TUserMessageTemplate instance) {
		log.debug("finding TUserMessageTemplate instance by example");
		try {
			List<TUserMessageTemplate> results = (List<TUserMessageTemplate>) getHibernateTemplate().getSessionFactory()
					.getCurrentSession()
					.createCriteria("com.jite.hibgen.model.TUserMessageTemplate")
					.add(create(instance)).list();
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}
	
}
