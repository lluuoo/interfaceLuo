package com.jite.utils;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


/**
 * 文件操作工具
 * 
 * @author Jite Shen
 * 
 */
public class FileOperateUtil {
//	private static final String separator = File.separator;
	private static final String separator = "/";
	private static final SimpleDateFormat format = new SimpleDateFormat("yyyy"
			+ separator + "MM");
	private static final String txtFileAimEncoding = "UTF-8";
	private static final Log log = LogFactory.getLog(FileOperateUtil.class);

	public static String saveFile(InputStream inputStream,
			FileAbsolutePathEnum uploadPath, FileAbsolutePathEnum thePath, String fileName) throws IOException {
		String relativePath = generateNewFilePath(thePath, fileName);

		String theAbsolutePathInSystemDisk=SystemPropties.getProperties(uploadPath.getValue())+relativePath;
		writeFile(inputStream, theAbsolutePathInSystemDisk);

		

		return relativePath;
	}
	
	public static String saveFileWithTimeStamp(InputStream inputStream,
			FileAbsolutePathEnum uploadPath, FileAbsolutePathEnum thePath, String fileName) throws IOException {
		String relativePath = generateNewFilePathWithTimeStamp(thePath, fileName);

		String theAbsolutePathInSystemDisk=SystemPropties.getProperties(uploadPath.getValue())+relativePath;
		writeFile(inputStream, theAbsolutePathInSystemDisk);

		

		return relativePath;
	}
	private static void writeFile(InputStream inputStream,
			 String absolutePath)
			throws FileNotFoundException, IOException {
		FileOutputStream outputStream = null;
		File file = null;
		byte[] buffer = new byte[10240];// 10K
		int len;
		try {
			file = new File(absolutePath);
			if (!file.exists())
				file.getParentFile().mkdirs();
			outputStream = new FileOutputStream(file);

			while ((len = inputStream.read(buffer)) != -1) {
				outputStream.write(buffer, 0, len);
			}
		} finally {
			if (outputStream != null) {
				outputStream.flush();
				outputStream.close();
			}
			if (buffer != null)
				buffer = null;
		}
	}

	private static String generateNewFilePath(FileAbsolutePathEnum thePath,
			String fileName) {
		StringBuffer relative = new StringBuffer();
		relative.append(separator).append(SystemPropties.getProperties(thePath.getValue()))
				.append(separator).append(UUID.nameUUIDFromBytes(getFileName(fileName).getBytes()).toString())
				.append(".").append(StringUtils.lowerCase(getFileExt(fileName)));
		
		return relative.toString();
	}

	private static String generateNewFilePathWithTimeStamp(FileAbsolutePathEnum thePath,
			String fileName) {
		StringBuffer relative = new StringBuffer();
		relative.append(separator).append(SystemPropties.getProperties(thePath.getValue()))
				.append(separator).append(UUID.nameUUIDFromBytes((getFileName(fileName)+new Date().getTime()).getBytes()).toString())
				.append(".").append(StringUtils.lowerCase(getFileExt(fileName)));
		
		return relative.toString();
	}	
	public static void readFile(OutputStream outputStream,
			FileAbsolutePathEnum pathEnum, String filePath) throws IOException {
		FileInputStream inputStream = null;
		byte[] buffer = new byte[10240];// 10K
		int len;
		try {
			inputStream = new FileInputStream(new File(
					SystemPropties.getProperties(pathEnum.getValue()) + filePath));
			while ((len = inputStream.read(buffer)) != -1) {
				outputStream.write(buffer, 0, len);
			}
		} finally {
			if (inputStream != null) {
				inputStream.close();
			}
			if (outputStream != null) {
				outputStream.flush();
				outputStream.close();
			}
			if (buffer != null)
				buffer = null;
		}

	}
	
	public static void readFile(OutputStream outputStream,
			 String filePath) throws IOException {
		FileInputStream inputStream = null;
		byte[] buffer = new byte[10240];// 10K
		int len;
		try {
			inputStream = new FileInputStream(new File(filePath));
			while ((len = inputStream.read(buffer)) != -1) {
				outputStream.write(buffer, 0, len);
			}
		} finally {
			if (inputStream != null) {
				inputStream.close();
			}
			if (outputStream != null) {
				outputStream.flush();
				outputStream.close();
			}
			if (buffer != null)
				buffer = null;
		}

	}
	public static void deleteFilePhysical(FileAbsolutePathEnum pathEnum,
			String filePath) {
		try {
			File file = new File(SystemPropties.getProperties(pathEnum.getValue())
					+ filePath);
			file.delete();
		} catch (Exception e) {
			log.warn("删除文件时发生错误:", e);
		}
	}

	public static File getFile(FileAbsolutePathEnum pathEnum, String filePath)
			throws IOException {
		return new File(SystemPropties.getProperties(pathEnum.getValue())
				+ filePath);
	}

	public static String getFileExt(String fileName) {
		if (StringUtils.isBlank(fileName) || !fileName.contains("."))
			return null;
		return fileName.substring(fileName.lastIndexOf(".") + 1);
	}

	public static String getContentType(String fileName) {
		String ext = getFileExt(fileName);
		if (StringUtils.isBlank(ext)) {
			log.info(fileName + "文件无后缀,采用默认zip方式处理!");
			return FileContentTypeEnum.zip.toString();// 默认设为zip
		} else {
			try {
				return FileContentTypeEnum.valueOf(ext.toLowerCase())
						.toString();
			} catch (Exception e) {
				log.warn("后缀为:" + ext + "类型的文件当前系统不能处理,请添加!,默认将以zip的方式处理");
				return FileContentTypeEnum.zip.toString();// 默认设为zip
			}
		}
	}

	public static String getFileName(String filePath) {
		if (StringUtils.isBlank(filePath))
			return null;
		if (filePath.indexOf("/") == -1 && filePath.indexOf("\\") == -1) {
			return filePath;
		} else {
			if (filePath.indexOf("/") != -1) {
				return filePath.substring(filePath.lastIndexOf("/") + 1);
			} else {
				return filePath.substring(filePath.lastIndexOf("\\") + 1);
			}
		}
	}

	public static int getTxtFileCharSize(FileAbsolutePathEnum pathEnum,
			String filePath) {
		if (!StringUtils.equalsIgnoreCase("txt", getFileExt(filePath))) {
			return 0;
		}
		try {
			return getTxtFileCharSize(getFile(pathEnum, filePath));
		} catch (IOException e) {
			return 0;
		}
	}

	public static int getTxtFileCharSize(File textFile) {
		BufferedReader bufferedReader = null;
		CharBuffer charBuffer = null;
		try {
			bufferedReader = new BufferedReader(new FileReader(textFile));
			charBuffer = CharBuffer.allocate(1000);

			int len = 0;
			int sumCount = 0;
			while ((len = bufferedReader.read(charBuffer)) != -1) {
				charBuffer.rewind();
				sumCount += len;
			}
			return sumCount;

		} catch (IOException e) {
			return 0;
		} finally {
			try {
				if (bufferedReader != null) {
					bufferedReader.close();
					bufferedReader = null;

				}
			} catch (IOException e) {
			}

			if (charBuffer != null) {
				charBuffer.clear();
				charBuffer = null;
			}
		}
	}

	/**
	 * 转换文件编码
	 * 
	 * @param srcFile
	 *            源文件
	 * @param destFile
	 *            目的文件
	 * @param srcEncoding
	 *            源编码
	 * @param aimEncoding
	 *            目标编码
	 * @throws IOException
	 */
	public static void tranFileEncoding(File srcFile, File destFile,
			String srcEncoding, String aimEncoding) throws IOException {
		log.info(srcEncoding + "-->" + aimEncoding);
		String line_separator = System.getProperty("line.separator");

		FileInputStream fis = null;
		DataInputStream in = null;
		BufferedReader bfr = null;
		Writer ow = null;
		FileOutputStream fos = null;

		try {
			fis = new FileInputStream(srcFile);

			in = new DataInputStream(fis);
			bfr = new BufferedReader(new InputStreamReader(in, srcEncoding));

			fos = new FileOutputStream(destFile);
			ow = new OutputStreamWriter(fos, aimEncoding);

			String line = null;
			while ((line = bfr.readLine()) != null) {
				ow.append(line).append(line_separator);
			}
			bfr.close();
			in.close();
			fis.close();

			ow.close();
		} catch (IOException e) {
			throw e;
		} finally {
			if (bfr != null)
				bfr.close();
			if (in != null)
				in.close();
			if (fis != null)
				fis.close();
			if (ow != null)
				ow.close();
			if (fos != null)
				fos.close();
		}
	}

	public static String saveKnowledgeAbsoluteName(InputStream inputStream,
			FileAbsolutePathEnum pathEnum, String fileExt, String companyCode)
			throws IOException {
		String relativePath = generateNewCompanyFilePath(pathEnum, fileExt,
				companyCode);
		StringBuffer relative = new StringBuffer();
		relative.append(separator).append(companyCode).append(separator)
				.append(format.format(new Date())).append(separator);
		/*
		 * relative.append(separator).append(companyCode).append(separator).append
		 * (format.format(new Date()))
		 * .append(separator).append(UUID.randomUUID().toString())
		 * .append(".").append(StringUtils.lowerCase(fileExt));
		 */
		log.debug("文件存放绝对路径是:" + SystemPropties.getProperties(pathEnum.getValue())
				+ relative);
		return SystemPropties.getProperties(pathEnum.getValue())
				+ relative.toString();
		// writeFile(inputStream, pathEnum, relativePath);
		//
		// if(StringUtils.equalsIgnoreCase("txt", fileExt)){
		//
		// File sourceFile = new
		// File(SystemPropties.getProperties(pathEnum.getValue())+ relativePath);
		// System.err.println("old:"+sourceFile.getName());
		// String sourceEncoding = new
		// FileCharsetDetector().guestFileEncoding(sourceFile);
		//
		// if(!StringUtils.equalsIgnoreCase("UTF-8",
		// StringUtils.trim(sourceEncoding))){
		// log.info("TXT文件编码不是UTF-8,则转换成UTF-8");
		//
		// String newRelativePath = generateNewCompanyFilePath(pathEnum,
		// fileExt,companyCode);
		// File aimFile = new
		// File(SystemPropties.getProperties(pathEnum.getValue())+ newRelativePath);
		// System.err.println("new:"+aimFile.getName());
		// if (!aimFile.exists())
		// aimFile.getParentFile().mkdirs();
		// tranFileEncoding(sourceFile, aimFile, sourceEncoding,
		// txtFileAimEncoding);
		// //删除旧文件
		// sourceFile.delete();
		// System.err.println("delete over!");
		// return newRelativePath;
		// }
		// }
		//
	}

	public static String saveKnowledgeRelativeName(String absoluteName,
			FileAbsolutePathEnum pathEnum, String randomName)
			throws IOException {
		// String relativePath = generateNewCompanyFilePath(pathEnum, fileExt,
		// companyCode);
		StringBuffer relative = new StringBuffer();
		int cutLength = SystemPropties.getProperties(pathEnum.getValue()).length();
		String tempName = absoluteName.substring(cutLength);
		relative.append(tempName).append(randomName);
		// writeFile(inputStream, pathEnum, relativePath);
		//
		// if(StringUtils.equalsIgnoreCase("txt", fileExt)){
		//
		// File sourceFile = new
		// File(SystemPropties.getProperties(pathEnum.getValue())+ relativePath);
		// System.err.println("old:"+sourceFile.getName());
		// String sourceEncoding = new
		// FileCharsetDetector().guestFileEncoding(sourceFile);
		//
		// if(!StringUtils.equalsIgnoreCase("UTF-8",
		// StringUtils.trim(sourceEncoding))){
		// log.info("TXT文件编码不是UTF-8,则转换成UTF-8");
		//
		// String newRelativePath = generateNewCompanyFilePath(pathEnum,
		// fileExt,companyCode);
		// File aimFile = new
		// File(SystemPropties.getProperties(pathEnum.getValue())+ newRelativePath);
		// System.err.println("new:"+aimFile.getName());
		// if (!aimFile.exists())
		// aimFile.getParentFile().mkdirs();
		// tranFileEncoding(sourceFile, aimFile, sourceEncoding,
		// txtFileAimEncoding);
		// //删除旧文件
		// sourceFile.delete();
		// System.err.println("delete over!");
		// return newRelativePath;
		// }
		// }
		//
		return relative.toString();
	}

	private static String generateNewCompanyFilePath(
			FileAbsolutePathEnum pathEnum, String fileExt, String companyCode) {
		StringBuffer relative = new StringBuffer();
		relative.append(separator).append(companyCode).append(separator)
				.append(format.format(new Date())).append(separator);
		/*
		 * relative.append(separator).append(companyCode).append(separator).append
		 * (format.format(new Date()))
		 * .append(separator).append(UUID.randomUUID().toString())
		 * .append(".").append(StringUtils.lowerCase(fileExt));
		 */
		log.debug("文件存放绝对路径是:" + SystemPropties.getProperties(pathEnum.getValue())
				+ relative);
		return SystemPropties.getProperties(pathEnum.getValue())
				+ relative.toString();
	}

	public static String toUtf8String(String s) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < s.length(); i++) {
			char c = s.charAt(i);
			if (c >= 0 && c <= 255) {
				sb.append(c);
			} else {
				byte[] b;
				try {
					b = Character.toString(c).getBytes("utf-8");
				} catch (Exception ex) {
					//System.out.println(ex);
					b = new byte[0];
				}
				for (int j = 0; j < b.length; j++) {
					int k = b[j];
					if (k < 0)
						k += 256;
					sb.append("%" + Integer.toHexString(k).toUpperCase());
				}
			}
		}
		return sb.toString();
	}

	public static void main(String[] args) {
		// try {
		// InputStream inputStream = new FileInputStream(new File("spy.log"));
		//
		// String relativePath =
		// saveFile(inputStream,FileAbsolutePathEnum.ICON_PATH,"JPG");
		//
		// System.out.println(relativePath);
		//
		// System.out.println(getFileExt("D:\\test\\13213.jpg"));
		// } catch (IOException e) {
		// e.printStackTrace();
		// }

		// System.out.println(getContentType("test.ZIP2"));

		// System.out.println(getFileName("tesxt.jpg"));
		// System.out.println(getFileName(""));
		// System.out.println(getFileName("c:\\test\\t\\tesxt.jpg"));
		// System.out.println(getFileName("/add/ss/tesxt.jpg"));
		// System.out.println(getFileName("tesxt.jpg"));
		String aaaaa = "/33333我阿萨帝aa.doc";
		int cutLength = "/33333".length();
		String truenAM = aaaaa.substring(cutLength);
		//System.out.println(truenAM);
	}

}
