package com.jite.hibgen.dao;

import com.jite.hibgen.model.*;

import java.util.List;

import javax.naming.InitialContext;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Criteria;
import org.hibernate.LockMode;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

import static org.hibernate.criterion.Example.create;

/**
 * Home object for domain model class TVersion.
 * @see com.jite.hibgen.dao.TVersion
 * @author Hibernate Tools
 */
public class TVersionDao  extends BaseDao<TVersion>{
	
	private static final Log log = LogFactory.getLog(TVersionDao.class);
	
	public TVersionDao(){
	    super(TVersion.class);
	}
	public TVersionDao(TVersion poClass){
	    super(poClass.getClass());
	}
	
	public void persist(TVersion transientInstance) {
		log.debug("persisting TVersion instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().persist(transientInstance);
			log.debug("persist successful");
		} catch (RuntimeException re) {
			log.error("persist failed", re);
			throw re;
		}
	}

	public void attachDirty(TVersion instance) {
		log.debug("attaching dirty TVersion instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void attachClean(TVersion instance) {
		log.debug("attaching clean TVersion instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void delete(TVersion persistentInstance) {
		log.debug("deleting TVersion instance");
		try {
			getHibernateTemplate().getSessionFactory().getCurrentSession().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	public TVersion merge(TVersion detachedInstance) {
		log.debug("merging TVersion instance");
		try {
			TVersion result = (TVersion) getHibernateTemplate().getSessionFactory().getCurrentSession()
					.merge(detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	public TVersion findById(java.lang.Long id) {
		log.debug("getting TVersion instance with id: " + id);
		try {
			TVersion instance = (TVersion) getHibernateTemplate().getSessionFactory().getCurrentSession()
					.get("com.jite.hibgen.model.TVersion", id);
			if (instance == null) {
				log.debug("get successful, no instance found");
			} else {
				log.debug("get successful, instance found");
			}
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	public List<TVersion> findByExample(TVersion instance) {
		log.debug("finding TVersion instance by example");
		try {
			List<TVersion> results = (List<TVersion>) getHibernateTemplate().getSessionFactory()
					.getCurrentSession()
					.createCriteria("com.jite.hibgen.model.TVersion")
					.add(create(instance)).list();
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}
	@SuppressWarnings("unchecked")
	public List<TVersion> findAbove(TVersion search) {
		Criteria criteria=getHibernateTemplate()
				.getSessionFactory().getCurrentSession()
				.createCriteria(TVersion.class);
		
		criteria.add(Restrictions.eq("type", search.getType()));
			
		criteria.setProjection(null);
		//criteria.addOrder(Order.desc("versionCode"));
		criteria.addOrder(Order.desc("createDate"));
		
		return (List<TVersion>)criteria.list();
	}
}
